// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/stackrox/stackrox/generated/api/v1"
	storage "github.com/stackrox/stackrox/generated/storage"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddNotifier mocks base method.
func (m *MockStore) AddNotifier(notifier *storage.Notifier) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNotifier", notifier)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNotifier indicates an expected call of AddNotifier.
func (mr *MockStoreMockRecorder) AddNotifier(notifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNotifier", reflect.TypeOf((*MockStore)(nil).AddNotifier), notifier)
}

// GetNotifier mocks base method.
func (m *MockStore) GetNotifier(id string) (*storage.Notifier, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotifier", id)
	ret0, _ := ret[0].(*storage.Notifier)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNotifier indicates an expected call of GetNotifier.
func (mr *MockStoreMockRecorder) GetNotifier(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifier", reflect.TypeOf((*MockStore)(nil).GetNotifier), id)
}

// GetNotifiers mocks base method.
func (m *MockStore) GetNotifiers(request *v1.GetNotifiersRequest) ([]*storage.Notifier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotifiers", request)
	ret0, _ := ret[0].([]*storage.Notifier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotifiers indicates an expected call of GetNotifiers.
func (mr *MockStoreMockRecorder) GetNotifiers(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifiers", reflect.TypeOf((*MockStore)(nil).GetNotifiers), request)
}

// RemoveNotifier mocks base method.
func (m *MockStore) RemoveNotifier(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNotifier", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNotifier indicates an expected call of RemoveNotifier.
func (mr *MockStoreMockRecorder) RemoveNotifier(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNotifier", reflect.TypeOf((*MockStore)(nil).RemoveNotifier), id)
}

// UpdateNotifier mocks base method.
func (m *MockStore) UpdateNotifier(notifier *storage.Notifier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotifier", notifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotifier indicates an expected call of UpdateNotifier.
func (mr *MockStoreMockRecorder) UpdateNotifier(notifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotifier", reflect.TypeOf((*MockStore)(nil).UpdateNotifier), notifier)
}
