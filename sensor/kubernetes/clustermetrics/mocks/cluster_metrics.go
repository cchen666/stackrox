// Code generated by MockGen. DO NOT EDIT.
// Source: cluster_metrics.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	central "github.com/stackrox/rox/generated/internalapi/central"
	centralsensor "github.com/stackrox/rox/pkg/centralsensor"
)

// MockClusterMetrics is a mock of ClusterMetrics interface.
type MockClusterMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockClusterMetricsMockRecorder
}

// MockClusterMetricsMockRecorder is the mock recorder for MockClusterMetrics.
type MockClusterMetricsMockRecorder struct {
	mock *MockClusterMetrics
}

// NewMockClusterMetrics creates a new mock instance.
func NewMockClusterMetrics(ctrl *gomock.Controller) *MockClusterMetrics {
	mock := &MockClusterMetrics{ctrl: ctrl}
	mock.recorder = &MockClusterMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterMetrics) EXPECT() *MockClusterMetricsMockRecorder {
	return m.recorder
}

// Capabilities mocks base method.
func (m *MockClusterMetrics) Capabilities() []centralsensor.SensorCapability {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capabilities")
	ret0, _ := ret[0].([]centralsensor.SensorCapability)
	return ret0
}

// Capabilities indicates an expected call of Capabilities.
func (mr *MockClusterMetricsMockRecorder) Capabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capabilities", reflect.TypeOf((*MockClusterMetrics)(nil).Capabilities))
}

// ProcessMessage mocks base method.
func (m *MockClusterMetrics) ProcessMessage(msg *central.MsgToSensor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessMessage", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessMessage indicates an expected call of ProcessMessage.
func (mr *MockClusterMetricsMockRecorder) ProcessMessage(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessage", reflect.TypeOf((*MockClusterMetrics)(nil).ProcessMessage), msg)
}

// ResponsesC mocks base method.
func (m *MockClusterMetrics) ResponsesC() <-chan *central.MsgFromSensor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResponsesC")
	ret0, _ := ret[0].(<-chan *central.MsgFromSensor)
	return ret0
}

// ResponsesC indicates an expected call of ResponsesC.
func (mr *MockClusterMetricsMockRecorder) ResponsesC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponsesC", reflect.TypeOf((*MockClusterMetrics)(nil).ResponsesC))
}

// Start mocks base method.
func (m *MockClusterMetrics) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockClusterMetricsMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockClusterMetrics)(nil).Start))
}

// Stop mocks base method.
func (m *MockClusterMetrics) Stop(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", err)
}

// Stop indicates an expected call of Stop.
func (mr *MockClusterMetricsMockRecorder) Stop(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockClusterMetrics)(nil).Stop), err)
}
